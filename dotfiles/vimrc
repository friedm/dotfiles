set nocompatible

set modelines=1

set background=dark

"tabs
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

"misc
set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set wildignore=.git,*.class,*.o,*.a,*.obj,*.so,*.swp
set visualbell
"set cursorline
set lazyredraw
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set relativenumber
set undofile

let mapleader = ","

set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

set wrap
set textwidth=79
set formatoptions=qrn1
"set colorcolumn=85

"set list

nnoremap <space> za
set foldenable
set foldlevelstart=10
set foldnestmax=10
set foldmethod=syntax

nnoremap j gj
nnoremap k gk
nnoremap gV '[v']

inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
inoremap <esc> <nop>

au FocusLost * :wa

nnoremap <leader>v V`]
nnoremap <leader>ev <C-w>s<C-l>:e $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

inoremap jk <ESC>

nnoremap <leader>w <C-w>s<C-w>l

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

syntax on

call plug#begin('~/.vim/plugged')

Plug 'alfredodeza/pytest.vim'
Plug 'lervag/vimtex'
Plug 'dylanaraps/crayon'
Plug 'chriskempson/base16-vim'
Plug 'flazz/vim-colorschemes'
Plug 'sjl/gundo.vim'
Plug 'octref/RootIgnore'
Plug 'tpope/vim-unimpaired'

Plug 'tpope/vim-endwise'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'godlygeek/tabular'
Plug 'easymotion/vim-easymotion'
Plug 'majutsushi/tagbar'
Plug 'honza/vim-snippets'
Plug 'crusoexia/vim-monokai'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'vim-scripts/YankRing.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-fugitive'
Plug 'xolox/vim-misc'

Plug 'scrooloose/syntastic'

Plug 'travitch/hasksyn'

Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'
Plug 'vim-javascript'
Plug 'pangloss/vim-javascript'
"Plug 'airblade/vim-gitgutter'

Plug 'matze/vim-move'

"Plug 'Valloric/YouCompleteMe'

call plug#end()

nnoremap <S-j> :bprevious<cr>
nnoremap <S-k> :bnext<cr>

nnoremap <leader>N :enew<cr> " open a new buffer
nnoremap <leader>b :Buffers<cr> " list buffers
nnoremap <leader>n :Files<CR>
nnoremap <leader>l  :Lines<CR>
nnoremap <leader>a :Ag<space>
nnoremap <leader><enter> /{<cr>
nnoremap <leader><s-enter> ?{<cr>


nnoremap <F5> :!make<CR>
nnoremap <F6> :!make run<CR>
nnoremap <F7> :!make test<CR>
nnoremap <leader>t :!make test<CR>

execute 'vmap' '<leader>u' '<Plug>MoveBlockUp'
execute 'vmap' '<leader>d' '<Plug>MoveBlockDown'
execute 'nmap' '<leader>u' '<Plug>MoveLineUp'
execute 'nmap' '<leader>d' '<Plug>MoveLineDown'

nnoremap <leader>j }
nnoremap <leader>k {

let g:syntastic_enable_signs = 0

highlight LineNr ctermfg=DarkGrey


hi TabLine     guifg=#333 guibg=#222 gui=none ctermfg=254 ctermbg=238 cterm=none
hi TabLineSel  guifg=#666 guibg=#222 gui=bold ctermfg=231 ctermbg=235 cterm=bold
hi TabLineFill guifg=#999 guibg=#222 gui=none ctermfg=254 ctermbg=238 cterm=none

function! Tabline()
    let s = ''
    for i in range(tabpagenr('$'))
        let tab = i + 1
        let winnr = tabpagewinnr(tab)
        let buflist = tabpagebuflist(tab)
        let bufnr = buflist[winnr - 1]
        let bufname = bufname(bufnr)
        let bufmodified = getbufvar(bufnr, "&mod")

        let s .= '%' . tab . 'T'
        let s .= (tab == tabpagenr() ? '%#TabLineSel#' : '%#TabLine#')
        let s .= (bufname != '' ? ' '. fnamemodify(bufname, ':t') . ' ' : '[No Name] ')

        if bufmodified
            let s .= '[+] '
        endif
    endfor

    let s .= '%#TabLineFill#'
    return s
endfunction
set tabline=%!Tabline()

let g:tagbar_type_rust = {
    \ 'ctagstype' : 'rust',
    \ 'kinds' : [
        \'T:types,type definitions',
        \'f:functions,function definitions',
        \'g:enum,enumeration names',
        \'s:structure names',
        \'m:modules,module names',
        \'c:consts,static constants',
        \'t:traits,traits',
        \'i:impls,trait implementations',
    \]
    \}

let g:tagbar_type_markdown = {
    \ 'ctagstype' : 'markdown',
    \ 'kinds' : [
        \ 'h:Heading_L1',
        \ 'i:Heading_L2',
        \ 'k:Heading_L3'
    \ ]
    \ }

let g:tagbar_type_make = {
            \ 'kinds':[
                \ 'm:macros',
                \ 't:targets'
            \ ]
            \}

let g:tagbar_type_haskell = {
    \ 'ctagsbin'  : 'hasktags',
    \ 'ctagsargs' : '-x -c -o-',
    \ 'kinds'     : [
        \  'm:modules:0:1',
        \  'd:data: 0:1',
        \  'd_gadt: data gadt:0:1',
        \  't:type names:0:1',
        \  'nt:new types:0:1',
        \  'c:classes:0:1',
        \  'cons:constructors:1:1',
        \  'c_gadt:constructor gadt:1:1',
        \  'c_a:constructor accessors:1:1',
        \  'ft:function types:1:1',
        \  'fi:function implementations:0:1',
        \  'o:others:0:1'
    \ ],
    \ 'sro'        : '.',
    \ 'kind2scope' : {
        \ 'm' : 'module',
        \ 'c' : 'class',
        \ 'd' : 'data',
        \ 't' : 'type'
    \ },
    \ 'scope2kind' : {
        \ 'module' : 'm',
        \ 'class'  : 'c',
        \ 'data'   : 'd',
        \ 'type'   : 't'
    \ }
    \ }

"let g:ycm_collect_identifiers_from_tags_files = 1
"let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'

let g:yankring_history_dir = '~/.yr'

nnoremap <silent><leader>f <Esc>:Pytest file<CR>
nnoremap <silent><leader>c <Esc>:Pytest class<CR>
nnoremap <silent><leader>m <Esc>:Pytest method<CR>

nnoremap <silent><leader>e <Esc>:Pytest next<CR>

nnoremap <leader>u :GundoToggle<CR>

colorscheme desert
highlight Cursor guifg=white guibg=black


function Scramble()
    %!gpg -q --cipher-algo aes256 --symmetric --armor 2>/dev/null
endfunction

function Unscramble()
    set secure
    set viminfo=
    set noundofile
    set noswapfile
    set nobackup
    set nowritebackup
    set history=0
    set noshelltemp
    %!gpg -q --cipher-algo aes256 --decrypt --armor 2>/dev/null
endfunction

nnoremap <silent><leader>ee :call Scramble()<Esc>
nnoremap <silent><leader>ed :call Unscramble()<Esc>
